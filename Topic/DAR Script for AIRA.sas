
/* DAR FILE EXTRACTS */


/* CONNECT TO IIS DATABASE TABLES VIA ORACLE LOGIN */
LIBNAME IWEB ORACLE USER="username" PASSWORD="password" PATH="path to IIS database";

/* NOTES: 

    VP - VALUE POPULATED
	NP - NOT POPULATED
	EX - CANNOT SEND     

  DATES: YYYY-MM-DD, USE YYMMDD10.	*/


/*** 1. PATIENT INFORMATION - PULL FROM IWEB.H33_PATIENT_MASTER ***/

/* NOTES: MOTHER NAME SENT AS EX FOR TN; GUARDIAN TYPE FIELD NOT RELIABLE/CONSISTENT TO LIMIT TO "MOTHER" 

		  FOR OTHER IIS': UPDATE STATE IN 'WHERE' STATEMENT BELOW (KEEP MISSING ADDRESS_STATE TOO)*/
	
PROC SQL; 
CREATE TABLE PAT_INFO AS
SELECT 

ASIIS_PAT_ID, 
PAT_FIRST_NAME, 
PAT_MIDDLE_NAME, 
PAT_LAST_NAME, 
MOTHER_MAIDEN, 
"[[EX]]" AS MO_FIRST_NAME, 
"[[EX]]" AS MO_MIDDLE_NAME, 
"[[EX]]" AS MO_LAST_NAME, 
DATEPART(PAT_BIRTH_DATE) AS PAT_BIRTH_DATE FORMAT YYMMDD10., 
PAT_GENDER, 
ADDRESS_STREET1 AS PATIENT_ADDRESS1, 
ADDRESS_CITY AS PATIENT_CITY, 
ADDRESS_STATE AS PATIENT_STATE, 
"[[EX]]" AS PATIENT_CO, 
ADDRESS_ZIP AS PATIENT_ZIP, 
PAT_ETHNICITY_CODE,  
ADDRESS_EMAIL,
"[[EX]]" AS PAT_LANGUAGE,
"[[EX]]" AS ALIAS_FIRST_NAME, 
"[[EX]]" AS ALIAS_MIDDLE_NAME, 
"[[EX]]" AS ALIAS_LAST_NAME, 
"[[EX]]" AS RESP_FIRST_NAME, 
"[[EX]]" AS RESP_MIDDLE_NAME, 
"[[EX]]" AS RESP_LAST_NAME, 
"[[EX]]" AS RESP_RELATION, 
"[[EX]]" AS MULT_BIRTH_INDICATOR, 
"[[EX]]" AS BIRTH_ORDER, 
"[[EX]]" AS BIRTH_STATE,
"[[EX]]" AS PROV_LEVEL_STATUS, 
"[[EX]]" AS JURS_LEVEL_STATUS, 
DATEPART(REGISTRY_ENTRY_STAMP) AS RECORD_CREATION_DATE FORMAT YYMMDD10.,
"[[EX]]" AS RECORD_UPDATE_DATE

FROM  IWEB.H33_PATIENT_MASTER  

WHERE '01JAN2019'D <= DATEPART(PAT_BIRTH_DATE) <= '31DEC2020'D AND ADDRESS_STATE IN ("TN" "") AND INACTIVE_CODE IN("I","","X");

QUIT;

/*** 2. PULL FIELDS OR MAPPED VALUES NOT FOUND IN PATIENT MASTER TABLE ***/

/* PHONE RESERVES -  */

PROC SQL;
CREATE TABLE PAT_PHONE_RESERVE AS
SELECT A.*, B.PHONE_NUMBER
FROM PAT_INFO AS A
LEFT JOIN IWEB.H33_PHONE_RESERVE AS B
ON A.ASIIS_PAT_ID = B.ASIIS_PAT_ID_PTR
ORDER BY A.ASIIS_PAT_ID;
QUIT;

PROC SORT DATA = PAT_PHONE_RESERVE OUT = PAT_PHONE_RESERVE_DEDUP NODUPKEY; BY ASIIS_PAT_ID; RUN;

/* PATIENT RACE FROM PATIENT_RACE_MASTER */

PROC SQL;
CREATE TABLE PAT_RACE_MASTER AS
SELECT DISTINCT(A.ASIIS_PAT_ID), B.PAT_RACE 
FROM PAT_PHONE_RESERVE_DEDUP AS A
LEFT JOIN IWEB.H33_PATIENT_RACE_MASTER AS B
ON A.ASIIS_PAT_ID = B.ASIIS_PAT_ID_PTR;
QUIT;

/* TRANSPOSE TO CREATE ONE ROW PER PATIENT WITH A COLUMN FOR EACH INSTANCE OF RACE */

PROC TRANSPOSE DATA = PAT_RACE_MASTER OUT = PAT_RACE_MASTER_TRANS;
BY ASIIS_PAT_ID;
VAR PAT_RACE;
RUN;

/* CONCAT ALL RACE FIELDS */

DATA PAT_RACE_EDIT (DROP = _NAME_ _LABEL_ COL:);
SET PAT_RACE_MASTER_TRANS;
PAT_RACE = CATX(",",OF COL:);
RUN;

/* MERGE BACK INTO FULL PATIENT TABLE */

PROC SQL; 
CREATE TABLE PAT_INFO_RACE AS
SELECT A.*, B.PAT_RACE
FROM PAT_PHONE_RESERVE_DEDUP  AS A
LEFT JOIN PAT_RACE_EDIT       AS B 
ON A.ASIIS_PAT_ID = B.ASIIS_PAT_ID;
QUIT;


/*** 3.ASSIGN VP / NP STATUS TO APPLICABLE FIELDS ***/

/* NOTES: CONSIDERING RACE AND ETHNICITY OF "UNK" AS NP FOR TN PROGRAM PURPOSES - "UNK" COULD BE CONSIDERED VP IF DESIRED 

		  MAPPING FOR RACE CODES: DATA RACE_CODES; SET IWEB.H33_LOOKUP; WHERE LOOKUP_TYPE_CODE = "RACE"; RUN; (UNKNOWN = 9) 
          MAPPING FOR ETHNICITY CODES: DATA ETH_CODES; SET IWEB.H33_LOOKUP; WHERE LOOKUP_TYPE_CODE = "ETHNICITY"; RUN;  (UNKNOWN = 3) */


DATA PAT_INFO_B (DROP = PAT_GENDER PAT_ETHNICITY_CODE);
SET PAT_INFO_RACE;

IF PAT_FIRST_NAME NE "" THEN PAT_FIRST_NAME = "[[VP]]";
IF PAT_FIRST_NAME = ""  THEN PAT_FIRST_NAME = "[[NP]]";

IF PAT_MIDDLE_NAME NE "" THEN PAT_MIDDLE_NAME = "[[VP]]";
IF PAT_MIDDLE_NAME = ""  THEN PAT_MIDDLE_NAME = "[[NP]]";

IF PAT_LAST_NAME NE "" THEN PAT_LAST_NAME = "[[VP]]";
IF PAT_LAST_NAME = ""  THEN PAT_LAST_NAME = "[[NP]]";

IF MOTHER_MAIDEN NE "" THEN MOTHER_MAIDEN = "[[VP]]";
IF MOTHER_MAIDEN = ""  THEN MOTHER_MAIDEN = "[[NP]]";

IF PAT_GENDER NE "" THEN GENDER = "[[VP]]";
IF PAT_GENDER = ""  THEN GENDER = "[[NP]]";

IF PATIENT_ADDRESS1 NE "" THEN PATIENT_ADDRESS1 = "[[VP]]";
IF PATIENT_ADDRESS1 = ""  THEN PATIENT_ADDRESS1 = "[[NP]]";

IF PATIENT_STATE NE "" THEN PATIENT_STATE = "[[VP]]";
IF PATIENT_STATE = ""  THEN PATIENT_STATE = "[[NP]]";

IF PAT_RACE IN ("9" "")  THEN PAT_RACE = "[[NP]]";
ELSE PAT_RACE = "VP";

IF PAT_ETHNICITY_CODE IN (1 2)  THEN PAT_ETHNICITY = "[[VP]]";
IF PAT_ETHNICITY_CODE IN (3 .)  THEN PAT_ETHNICITY = "[[NP]]";

IF PHONE_NUMBER NE ""  THEN PAT_PHONE = "[[VP]]";
IF PHONE_NUMBER =  ""  THEN PAT_PHONE = "[[NP]]";

IF ADDRESS_EMAIL NE "" THEN ADDRESS_EMAIL = "[[VP]]";
IF ADDRESS_EMAIL = ""  THEN ADDRESS_EMAIL = "[[NP]]";

RUN;


/*** 4. REORDER PATIENT TABLE TO MATCH FILE SPECS ***/

PROC SQL;
CREATE TABLE PATIENT_INFO AS
SELECT 
ASIIS_PAT_ID, PAT_FIRST_NAME, PAT_MIDDLE_NAME, PAT_LAST_NAME, MOTHER_MAIDEN, MO_FIRST_NAME, MO_MIDDLE_NAME, MO_LAST_NAME, PAT_BIRTH_DATE, GENDER, 
PATIENT_ADDRESS1, PATIENT_CITY, PATIENT_STATE, PATIENT_CO, PATIENT_ZIP, PAT_RACE, PAT_ETHNICITY, PAT_PHONE, ADDRESS_EMAIL, PAT_LANGUAGE,
ALIAS_FIRST_NAME, ALIAS_MIDDLE_NAME, ALIAS_LAST_NAME, RESP_FIRST_NAME, RESP_MIDDLE_NAME, RESP_LAST_NAME, RESP_RELATION, MULT_BIRTH_INDICATOR, BIRTH_ORDER, BIRTH_STATE,
PROV_LEVEL_STATUS, JURS_LEVEL_STATUS, RECORD_CREATION_DATE, RECORD_UPDATE_DATE
FROM PAT_INFO_B
ORDER BY ASIIS_PAT_ID;
QUIT;

PROC SORT DATA = PATIENT_INFO NODUPKEY; BY ASIIS_PAT_ID; RUN;


/* RECONNECT TO DB */
LIBNAME IWEB ORACLE USER="username" PASSWORD="password" PATH="path to IIS database";

/*** 5.VACCINATION INFORMATION - PULL FROM IWEB.H33_VACCINATION_MASTER ***/

/* NOTES: USE ASIIS_VACC_CODE AND NOT CDC_VACC_CODE. CDC_VACC_CODE IS NOT POPULATED FOR DIRECT DATA ENTRY RECORDS. WILL MERGE WITH ASIIS_VACC_CODE TABLE LATER TO GET 
			CVX CODE FOR THE ASSOCIATED ASIIS_VACC_CODE. 

		  USE MANU_CODE (MAPPED VALUE) INSTEAD OF MANUFACTURER (FREE TEXT FIELD). 

		  NOT SENDING NDC CODE BECAUSE WE ARE PULLING FROM THE VACCINE MASTER TABLE. NDC IS ONLY FOUND IN THE VACCINATION RESERVE TABLE. */


PROC SQL; 
CREATE TABLE VACCINE_MASTER_PULL AS 
SELECT 

A.ASIIS_PAT_ID,
B.ASIIS_PAT_ID_PTR,
B.LAST_IRMS_SYS_ID_TO_UPDATE AS REPORTING_ORG,
"[[EX]]" AS SENDING_ORG,
"[[EX]]" AS RESP_ORG,
B.LAST_IRMS_FAC_ID_TO_UPDATE AS FACILITY, 
B.VACCINATOR, 
B.ASIIS_VACC_CODE, 
"[[EX]]" AS NDC_NUMBER, 
DATEPART(B.VACC_DATE) AS VACC_DATE FORMAT YYMMDD10., 
B.MANU_CODE, 
B.LOT_NUM, 
B.HISTORICAL, 
B.ANATOMICAL_ROUTE,
B.ANATOMICAL_SITE, 
"[[EX]]" AS EXPIRATION_DATE,
B.CC_VOLUME, 
"[[EX]]" AS ORDERING_PROVIDER, 
"[[EX]]" AS COMPLETION_STATUS,
B.VFC_ELIGIBLE, 
B.FUNDING_SOURCE_ID, 
"[[EX]]" AS VIS_IDENTIFY,
"[[EX]]" AS VIS_PUB_DATE,
"[[EX]]" AS VIS_GIVEN_DATE,
DATEPART(B.INSERT_STAMP) AS RECORD_CREATION_DATE FORMAT YYMMDD10.,
"[[EX]]" AS RECORD_UPDATE_DATE

FROM PATIENT_INFO AS A
LEFT JOIN IWEB.H33_VACCINATION_MASTER AS B
ON A.ASIIS_PAT_ID = B.ASIIS_PAT_ID_PTR
WHERE DELETION_DATE = .;
QUIT;

/*** 6.ASSIGN VP / NP STATUS TO APPLICABLE FIELDS ***/

DATA VACCINE_MASTER_B;
SET VACCINE_MASTER_PULL;

IF FACILITY NE "" THEN LAST_IRMS_FAC_ID = "[[VP]]";
IF FACILITY = ""  THEN LAST_IRMS_FAC_ID = "[[NP]]";

IF VACCINATOR NE "" THEN VACCINATOR = "[[VP]]";
IF VACCINATOR = ""  THEN VACCINATOR = "[[NP]]";

IF HISTORICAL = "Y" THEN HISTORICAL_B = "01";
IF HISTORICAL = ""  THEN HISTORICAL_B = "00";

IF CC_VOLUME NE . THEN VOLUME = "[[VP]]";
IF CC_VOLUME = .  THEN VOLUME = "[[NP]]";

IF ASIIS_PAT_ID_PTR = . THEN DELETE;
RUN;


/* RECONNECT TO DB */
LIBNAME IWEB ORACLE USER="username" PASSWORD="password" PATH="path to IIS database";

/*** 7. UPDATE APPLICABLE MAPPED VALUES TO MATCH CDC TABLES ***/

/* ASIIS_VACC_CODE TO CVX_CODE */

PROC SQL; 
CREATE TABLE VACCINE_MASTER_CVX AS 
SELECT A.*, B.BEST_CDC_CODE AS CVX_CODE
FROM VACCINE_MASTER_B AS A
LEFT JOIN IWEB.H33_ASIIS_VACC_CODE AS B
ON A.ASIIS_VACC_CODE = B.ASIIS_VACC_CODE;
QUIT;

/*ADMIN ROUTE AND ADMIN SITE HL7 MAPPING CODES */

/* CHECK FREQUENCY OF VACCINATION ROUTE: PROC FREQ DATA = VACCINE_MASTER_B; TABLES ANATOMICAL_ROUTE; RUN;*/

DATA VACCINE_ROUTE; 
SET VACCINE_MASTER_CVX;

IF ANATOMICAL_ROUTE = "INTRADERMAL" 		THEN ANATOMICAL_ROUTE = "ID";
IF ANATOMICAL_ROUTE = "INTRAMUSCULAR" 		THEN ANATOMICAL_ROUTE = "IM";
IF ANATOMICAL_ROUTE = "NASAL" 				THEN ANATOMICAL_ROUTE = "NS";
IF ANATOMICAL_ROUTE = "INTRAVENOUS" 		THEN ANATOMICAL_ROUTE = "IV";
IF ANATOMICAL_ROUTE = "ORAL" 				THEN ANATOMICAL_ROUTE = "PO";
IF ANATOMICAL_ROUTE = "SUBCUTANEOUS" 		THEN ANATOMICAL_ROUTE = "SC";
IF ANATOMICAL_ROUTE = "TRANSDERMAL" 		THEN ANATOMICAL_ROUTE = "TD";

IF ANATOMICAL_ROUTE = "" 					THEN ANATOMICAL_ROUTE = "";

IF ANATOMICAL_ROUTE NOT IN ("ID" "IM" "NS" "IV" "PO" "SC" "TD" "") THEN ANATOMICAL_ROUTE = "OTH";

RUN;

/* CONFIRM FREQUENCY OF VACCINATION ROUTE IS THE SAME WITH UPDATED ROUTE VALUES: PROC FREQ DATA = VACCINE_ROUTE; TABLES ANATOMICAL_ROUTE; RUN;*/


/* CHECK FREQUENCY OF VACCINATION SITE TYPE: PROC FREQ DATA = VACCINE_MASTER_B; TABLES ANATOMICAL_SITE; RUN;*/

/* NOTES: NOT ALL SITE VALUES NEED TO BE UPDATED, SOME ARE STORED CORRECTLY IN THE DATABASE */
DATA VACCINE_SITE; 
SET VACCINE_ROUTE;

IF ANATOMICAL_SITE = "LEFT_THIGH" 			THEN ANATOMICAL_SITE = "LT";
IF ANATOMICAL_SITE = "LEFT_ARM" 			THEN ANATOMICAL_SITE = "LA";
/*IF ANATOMICAL_SITE = "" 					THEN ANATOMICAL_SITE = "LD";*/
IF ANATOMICAL_SITE = "LEFT_GLUTEUS" 		THEN ANATOMICAL_SITE = "LG";
/*IF ANATOMICAL_SITE = "" 					THEN ANATOMICAL_SITE = "LVL";
IF ANATOMICAL_SITE = "" 					THEN ANATOMICAL_SITE = "LLFA";*/
IF ANATOMICAL_SITE = "RIGHT_THIGH" 			THEN ANATOMICAL_SITE = "RT";
IF ANATOMICAL_SITE = "RIGHT_ARM" 			THEN ANATOMICAL_SITE = "RA";
/*IF ANATOMICAL_SITE = "" 					THEN ANATOMICAL_SITE = "RD";*/
IF ANATOMICAL_SITE = "RIGHT_GLUTEUS" 		THEN ANATOMICAL_SITE = "RG";
/*IF ANATOMICAL_SITE = "" 					THEN ANATOMICAL_SITE = "RVL";
IF ANATOMICAL_SITE = "" 					THEN ANATOMICAL_SITE = "RLFA";*/

IF ANATOMICAL_SITE = "" 					THEN ANATOMICAL_SITE = "";

RUN;

/* CONFIRM FREQUENCY OF VACCINATION SITE TYPE IS THE SAME WITH UPDATED SITE TYPE VALUES: PROC FREQ DATA = VACCINE_SITE; TABLES ANATOMICAL_SITE; RUN;*/


/* VFC ELIGIBILITY AND FUNDING SOURCE HL7 MAPPING CODES */

PROC SQL;
CREATE TABLE VACCINE_MASTER_VFC AS
SELECT A.*, B.HL7_CODE AS DOSE_ELIGIBILITY
FROM VACCINE_SITE AS A
LEFT JOIN IWEB.H33_ELIGIBILITY_CATEGORIES AS B 
ON A.VFC_ELIGIBLE = B.INTERNAL_CODE;
QUIT;

PROC SQL;
CREATE TABLE VACCINE_MASTER_FS AS
SELECT A.*, B.HL7_CODE AS FUNDING_SOURCE
FROM VACCINE_MASTER_VFC AS A
LEFT JOIN IWEB.H33_VACCINE_FUNDING_SOURCE AS B 
ON A.FUNDING_SOURCE_ID = B.FUNDING_SOURCE_ID;
QUIT;


/*** 8.CREATE VAX ID: CONCAT ASIIS_PAT_ID_PTR + CVX CODE + VACC_DATE ***/

DATA VAX_ID;
SET VACCINE_MASTER_FS;
VAX_ID = CAT("TN",ASIIS_PAT_ID_PTR,CVX_CODE,VACC_DATE);
RUN;

/* CONFIRM UNIQUE VAX ID VALUE BY CHECKING FOR DUPLICATES (DECREASE IN NUMBER OF OBSERVATIONS) */

PROC SORT DATA = VAX_ID NODUPKEY; BY VAX_ID; RUN; 


/*** 9. REORDER VACCINATION TABLE TO MATCH SPECS ***/

PROC SQL; 
CREATE TABLE VACCINE_MASTER AS 
SELECT ASIIS_PAT_ID, VAX_ID AS VACCINATION_EVENT_ID, REPORTING_ORG, SENDING_ORG, RESP_ORG, FACILITY, VACCINATOR, CVX_CODE, NDC_NUMBER, VACC_DATE,
	MANU_CODE, LOT_NUM, HISTORICAL_B AS HISTORICAL, ANATOMICAL_ROUTE, ANATOMICAL_SITE, EXPIRATION_DATE, VOLUME, ORDERING_PROVIDER, COMPLETION_STATUS, 
	DOSE_ELIGIBILITY, FUNDING_SOURCE, VIS_IDENTIFY, VIS_PUB_DATE, VIS_GIVEN_DATE, RECORD_CREATION_DATE, RECORD_UPDATE_DATE
FROM VAX_ID
ORDER BY ASIIS_PAT_ID;
QUIT;


/*** 10A. LIMIT OUTPUT FOR UPLOAD TESTING ***/

DATA VACCINE_MASTER_TEST;
SET VACCINE_MASTER (OBS = 10);
RUN;

DATA PATIENT_INFO_TEST;
SET PATIENT_INFO (OBS = 10);
RUN;

PROC EXPORT DATA = PATIENT_INFO_TEST OUTFILE = "file location \patientFile test.TXT" DBMS = TAB; RUN;

PROC EXPORT DATA = VACCINE_MASTER_TEST OUTFILE = "file location \immunizationFile test.TXT" DBMS = TAB; RUN; 


/*** 10B. OUTPUT FULL TEXT FILES - FORMAT OF FILE NAMES FOLLOWS DAR GUIDE ***/

/* PATIENT FILE */
PROC EXPORT DATA = PATIENT_INFO OUTFILE = "file location \patientFile.TXT" DBMS = TAB; RUN;

/* VACCINATION FILE */
PROC EXPORT DATA = VACCINE_MASTER OUTFILE = "file location \immunizationFile.TXT" DBMS = TAB; RUN;
